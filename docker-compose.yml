# docker-compose.yml

version: "3.8"

services:
  postgres:
    image: pgvector/pgvector:pg16
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: agent_team
      POSTGRES_USER: agent_user
      POSTGRES_PASSWORD: agent_password # Use .env for real secrets
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infra/docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U agent_user -d agent_team"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Backend Service (FastAPI/Agents)
  backend:
    build:
      context: .
      dockerfile: infra/docker/python/Dockerfile
    volumes:
      - .:/app # Mount the entire project directory
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql+asyncpg://agent_user:agent_password@postgres:5432/agent_team # Use asyncpg driver
      - REDIS_URL=redis://redis:6379/0
      - PYTHONUNBUFFERED=1 # Ensures logs appear immediately
      # Add other necessary ENV VARS (e.g., LLM API keys from .env)
    # Example command (adjust as needed when app/main.py exists):
    # command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    command: tail -f /dev/null # Keep container running for exec
    ports:
      - "8000:8000"
    restart: unless-stopped

  celery_worker:
    build:
      context: .
      dockerfile: infra/docker/python/Dockerfile
    volumes:
      - .:/app
    depends_on:
      redis:
        condition: service_healthy
      postgres: # Worker might need DB access
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql+asyncpg://agent_user:agent_password@postgres:5432/agent_team
      - REDIS_URL=redis://redis:6379/0
      - PYTHONUNBUFFERED=1
      # Add other necessary ENV VARS (e.g., LLM API keys from .env)
    # Command to start the Celery worker
    # Assumes celery app is defined in agents/orchestration/celery_app.py
    command: celery -A agents.tasks.celery_app worker --loglevel=info
    restart: unless-stopped

  celery_beat:
    build:
      context: .
      dockerfile: infra/docker/python/Dockerfile
    volumes:
      - .:/app
    depends_on:
      redis:
        condition: service_healthy
      postgres: # Beat might need DB access
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql+asyncpg://agent_user:agent_password@postgres:5432/agent_team
      - REDIS_URL=redis://redis:6379/0
      - PYTHONUNBUFFERED=1
      # Add other necessary ENV VARS
    # Command to start the Celery beat scheduler
    command: celery -A agents.tasks.celery_app beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    restart: unless-stopped

  # Frontend Service (Next.js)
  frontend:
    build:
      context: ./dashboard
      dockerfile: ../infra/docker/node/Dockerfile
    ports:
      - "3000:3000"
    depends_on:
      - backend # Optional dependency if frontend needs backend at build/start
    environment:
      - NEXT_PUBLIC_API_URL=http://backend:8000 # Example ENV VAR
      # Add other necessary ENV VARS
    # Command is inherited from Dockerfile CMD ["pnpm", "dev"] unless overridden here.
    # Keep command commented out or remove if CMD in Dockerfile is sufficient.
    # command: pnpm dev
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
