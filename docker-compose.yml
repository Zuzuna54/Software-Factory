version: "3.8"

services:
  postgres:
    image: postgres:16
    container_name: ai_team_postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: autonomous_ai_dev
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infra/db/scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:latest
    container_name: ai_team_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4
    container_name: ai_team_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      postgres:
        condition: service_healthy

  api:
    build:
      context: .
      dockerfile: ./infra/docker/api.Dockerfile
    container_name: ai_team_api
    environment:
      DATABASE_URL: postgresql+asyncpg://postgres:postgres@postgres/autonomous_ai_dev
      REDIS_URL: redis://redis:6379/0
      PYTHONPATH: /app
    ports:
      - "8000:8000"
    volumes:
      - ./agents:/app/agents
      - ./infra:/app/infra
      - ./app:/app/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: uvicorn agents.main:app --host 0.0.0.0 --reload

  celery-worker:
    build:
      context: .
      dockerfile: ./infra/docker/api.Dockerfile
    container_name: ai_team_celery
    environment:
      DATABASE_URL: postgresql+asyncpg://postgres:postgres@postgres/autonomous_ai_dev
      REDIS_URL: redis://redis:6379/0
      PYTHONPATH: /app
    volumes:
      - ./agents:/app/agents
      - ./infra:/app/infra
      - ./app:/app/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A agents.tasks.celery_app worker --loglevel=info

  dashboard:
    build:
      context: .
      dockerfile: ./infra/docker/dashboard.Dockerfile
    container_name: ai_team_dashboard
    ports:
      - "3000:3000"
    volumes:
      - ./dashboard:/app
      - /app/node_modules
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8000
    depends_on:
      - api

volumes:
  postgres_data:
  redis_data:
  pgadmin_data:
